// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===============================================
// MODEL INTI
// ===============================================

model User {
  id            String    @id @default(cuid())
  name          String
  username      String?   @unique
  password      String?   
  email         String?   @unique
  emailVerified DateTime?
  image         String?   
  role          UserRole  @default(USER)
  bio           String?   @db.Text 
  jobTitle      String?   
  company       String?   
  location      String?   
  websiteUrl    String?   
  cvUrl         String?   
  githubUrl     String?
  twitterUrl    String?
  linkedinUrl   String?
  phone               String?   
  timezone            String?   
  availability        String?   
  responseTime        String?   
  preferredContact    String?   
  openToWork          Boolean   @default(false)
  openToMentoring     Boolean   @default(false)
  openToCollaboration Boolean   @default(false)
  streak        Int       @default(0)  
  skillPoints   Int       @default(0)  
  communityRank String?   
  totalXp       Int       @default(0) 
  level         Int       @default(1) 
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  projects          Project[]      
  userAchievements  UserAchievement[]    
  learningGoals     LearningGoal[] 
  activityLogs      ActivityLog[]  
  certificates      Certificate[]
  receivedMessages  ContactMessage[]
  formalEducations  FormalEducation[]
  onlineCourses     OnlineCourse[]
  skillAreas        SkillArea[]
  workExperiences   WorkExperience[]
  professionalSkills ProfessionalSkill[]
  
  // --- PENAMBAHAN BARU UNTUK HOMEPAGE FEED ---
  posts     Post[]      
  likes     Like[]      
  comments  Comment[]
}

// --- PENAMBAHAN BARU UNTUK HOMEPAGE FEED ---
model Post {
  id        String   @id @default(cuid())
  type      PostType

  textContent String?  @db.Text
  caption     String?  @db.Text
  imageUrls   String[]

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?  @unique

  likes     Like[]
  comments  Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.Text
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  @@index([postId])
  @@index([authorId])
}
// --- AKHIR PENAMBAHAN BARU ---


model Project {
  id               String   @id @default(cuid())
  title            String
  slug             String   @unique
  description      String   @db.Text
  longDescription  String?  @db.Text 
  thumbnail        String?
  isPublished      Boolean  @default(false)
  isFeatured       Boolean  @default(false)
  projectType      ProjectType @default(PERSONAL)
  stars            Int      @default(0)
  forks            Int      @default(0)
  views            Int      @default(0)
  downloads        Int      @default(0)
  likes            Int      @default(0)
  commentsCount    Int      @default(0)
  status           ProjectStatus @default(IN_PROGRESS)
  startDate        DateTime?
  endDate          DateTime?
  teamSize         Int?
  role             String?  
  highlights       String[] 
  demoUrl          String?
  githubUrl        String?
  client           String?
  result           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String
  technologies     Technology[]
  category         ProjectCategory?  @relation(fields: [categoryId], references: [id])
  categoryId       String?

  // --- PENAMBAHAN BARU ---
  post      Post?

  @@index([authorId])
  @@index([categoryId])
}

// ... (sisa model sama seperti sebelumnya, aku sertakan di bawah untuk kelengkapan)
model WorkExperience {
  id           String         @id @default(cuid())
  company      String
  position     String
  type         EmploymentType
  location     String?
  startDate    DateTime
  endDate      DateTime?
  logoUrl      String?
  description  String?        @db.Text
  achievements String[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  technologies Technology[]
  highlights   WorkHighlight[]
  @@index([userId])
}

model WorkHighlight {
  id               String         @id @default(cuid())
  metric           String
  label            String
  workExperience   WorkExperience @relation(fields: [workExperienceId], references: [id], onDelete: Cascade)
  workExperienceId String
  @@index([workExperienceId])
}

model ProfessionalSkill {
  id                String   @id @default(cuid())
  name              String
  proficiency       Int
  type              SkillType
  yearsOfExperience Int?
  projectCount      Int?
  icon              String?
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  category          SkillCategory @relation(fields: [categoryId], references: [id])
  categoryId        String
  @@unique([userId, name])
  @@index([userId])
  @@index([categoryId])
}

model SkillCategory {
  id       String              @id @default(cuid())
  name     String              @unique
  icon     String?
  color    String?
  order    Int                 @default(0)
  skills   ProfessionalSkill[]
}

model FormalEducation {
  id            String   @id @default(cuid())
  institution   String
  degree        String
  fieldOfStudy  String
  location      String?
  startDate     DateTime
  endDate       DateTime?
  gpa           String?
  description   String?  @db.Text
  logoUrl       String?
  status        EducationStatus
  achievements  String[]
  courses       String[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  @@index([userId])
}

model OnlineCourse {
  id             String          @id @default(cuid())
  platform       String
  title          String
  provider       String
  completedDate  DateTime?
  duration       String?
  status         EducationStatus
  certificateUrl String?
  grade          String?
  description    String?         @db.Text
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  skills         Skill[]
  @@index([userId])
}

model SkillArea {
  id          String   @id @default(cuid())
  category    String
  proficiency Int
  skills      String[]
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  @@index([userId])
}

model Certificate {
  id              String   @id @default(cuid())
  title           String
  description     String?  @db.Text
  issuer          String
  issuerLogo      String?
  badgeUrl        String?
  icon            String?
  level           CertificateLevel
  completionDate  DateTime
  expiryDate      DateTime?
  credentialId    String?
  verificationUrl String?
  isVerified      Boolean  @default(false)
  hours           Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  category    CertificateCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  skills      Skill[]
  @@index([userId])
  @@index([categoryId])
}

model CertificateCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  certificates Certificate[]
}

model Skill {
  id            String         @id @default(cuid())
  name          String         @unique
  certificates  Certificate[]
  onlineCourses OnlineCourse[]
}

model ProjectCategory {
  id       String    @id @default(cuid())
  name     String    @unique
  icon     String?
  color    String?
  projects Project[]
}

model Technology {
  id              String           @id @default(cuid())
  name            String           @unique
  projects        Project[]
  workExperiences WorkExperience[]
}

model Achievement {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String             @db.Text
  icon         String
  xp           Int
  rarity       AchievementRarity
  requirements String
  category     Category           @relation(fields: [categoryId], references: [id])
  categoryId   String
  awardedTo    UserAchievement[]
  @@index([categoryId])
}

model UserAchievement {
  id            String    @id @default(cuid())
  progress      Int       @default(0)
  earnedAt      DateTime?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model LearningGoal {
  id             String    @id @default(cuid())
  title          String
  progress       Int       @default(0)
  targetProgress Int?
  category       String?
  targetDate     DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  @@index([userId])
}

model ActivityLog {
  id        String       @id @default(cuid())
  type      ActivityType
  message   String
  points    Int
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  relatedLink String?
  @@index([userId])
}

model Category {
  id           String         @id @default(cuid())
  name         String         @unique
  achievements Achievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// ===============================================
// ENUMS
// ===============================================
enum UserRole { SUPERADMIN, ADMIN, MENTOR, USER }
enum AchievementRarity { COMMON, RARE, EPIC, LEGENDARY }
enum CertificateLevel { BEGINNER, INTERMEDIATE, ADVANCED, PROFESSIONAL, FOUNDATIONAL }
enum ActivityType { COURSE_COMPLETED, PROJECT_SHARED, MENTORING, ACHIEVEMENT_EARNED, CERTIFICATE_ADDED, CONTACT_MESSAGE_RECEIVED, EDUCATION_ADDED, EXPERIENCE_ADDED, SKILL_UPDATED, POST_CREATED }
enum EducationStatus { GRADUATED, IN_PROGRESS }
enum EmploymentType { FULL_TIME, PART_TIME, CONTRACT, FREELANCE, INTERNSHIP }
enum ProjectType { PERSONAL, FREELANCE, WORK }
enum ProjectStatus { ACTIVE, COMPLETED, IN_PROGRESS, ARCHIVED, ONGOING }
enum SkillType { TECHNICAL, SOFT }

// --- PENAMBAHAN BARU ---
enum PostType {
  TEXT
  PHOTO
  PROJECT
}