// prisma/schema.prisma

// 1. Konfigurasi datasource & generator
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// 2. Model yang DIBUTUHKAN oleh NextAuth Prisma Adapter
// Jangan ubah nama-nama field ini!

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique // Tambahan kita untuk Provogram
  password      String?   // Tambahan kita untuk Provogram
  imageUrl      String?   // Tambahan kita untuk Provogram
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER) // Tambahan kita untuk Provogram
  accounts      Account[]
  sessions      Session[]
  // Nanti relasi ke Project dll di sini
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum untuk role user
enum UserRole {
  SUPERADMIN
  ADMIN
  MENTOR
  USER
}